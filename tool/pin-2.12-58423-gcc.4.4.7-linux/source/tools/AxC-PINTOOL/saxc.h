#ifndef SAXC_H
#define SAXC_H

typedef enum SAxC_IC_TYPE_T{
	SAxC_IC_TYPE_FLOAT_DIV_R_R,
	SAxC_IC_TYPE_FLOAT_DIV_R_M,
	SAxC_IC_TYPE_DOUBLE_DIV_R_R,
	SAxC_IC_TYPE_DOUBLE_DIV_R_M,
	SAxC_IC_TYPE_INT_DIV_R_R,
	SAxC_IC_TYPE_INT_DIV_R_M,
	SAxC_IC_TYPE_FLOAT_MUL_R_R,
	SAxC_IC_TYPE_FLOAT_MUL_R_M,
	SAxC_IC_TYPE_DOUBLE_MUL_R_R,
	SAxC_IC_TYPE_DOUBLE_MUL_R_M,
	SAxC_IC_TYPE_INT_MUL_R_R,
	SAxC_IC_TYPE_INT_MUL_R_M,
	SAxC_IC_TYPE_FLOAT_ADD_R_R,
	SAxC_IC_TYPE_FLOAT_ADD_R_M,
	SAxC_IC_TYPE_DOUBLE_ADD_R_R,
	SAxC_IC_TYPE_DOUBLE_ADD_R_M,
	SAxC_IC_TYPE_INT_ADD_R_R,
	SAxC_IC_TYPE_INT_ADD_R_M,
	SAxC_IC_TYPE_FLOAT_SUB_R_R,
	SAxC_IC_TYPE_FLOAT_SUB_R_M,
	SAxC_IC_TYPE_DOUBLE_SUB_R_R,
	SAxC_IC_TYPE_DOUBLE_SUB_R_M,
	SAxC_IC_TYPE_INT_SUB_R_R,
	SAxC_IC_TYPE_INT_SUB_R_M,
	SAxC_IC_TYPE_FLOAT_MV_M_R,
	SAxC_IC_TYPE_FLOAT_MV_R_M,
	SAxC_IC_TYPE_DOUBLE_MV_M_R,
	SAxC_IC_TYPE_DOUBLE_MV_R_M,
	SAxC_IC_TYPE_INT_MV_M_R,
	SAxC_IC_TYPE_INT_MV_R_M,
	SAxC_IC_TYPE_END // always leave me at end of enum
} SAxC_IC_TYPE;

int * SAxC_IC_COUNTS;

VOID SAxC_Alloc_IC_COUNTS(){
	int i;
	SAxC_IC_COUNTS = (int *) malloc((SAxC_IC_TYPE_END)*sizeof(int));
	for(i=0; i < SAxC_IC_TYPE_END; i++){
		SAxC_IC_COUNTS[i] = 0;
	}
}

#endif
